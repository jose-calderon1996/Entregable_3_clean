{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/jose/Desktop/Entregable_3_clean/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/auth\";\nimport * as i2 from \"@angular/fire/compat/firestore\";\nexport class AuthService {\n  constructor(afAuth, firestore) {\n    this.afAuth = afAuth;\n    this.firestore = firestore;\n  }\n  // Método para verificar si el usuario está autenticado\n  isAuthenticated() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const user = yield _this.afAuth.currentUser;\n      return user !== null;\n    })();\n  }\n  // Método para guardar datos adicionales en Firestore\n  saveUserData(uid, data) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      return _this2.firestore.collection('users').doc(uid).set(data);\n    })();\n  }\n  // Método para iniciar sesión\n  login(email, password) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      return _this3.afAuth.signInWithEmailAndPassword(email, password);\n    })();\n  }\n  // Método para registrar usuario\n  register(email, password) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      return _this4.afAuth.createUserWithEmailAndPassword(email, password);\n    })();\n  }\n  // Método para obtener los datos del usuario como Observable\n  getUserData() {\n    return new Observable(observer => {\n      this.afAuth.currentUser.then(user => {\n        if (user) {\n          this.firestore.collection('users').doc(user.uid).valueChanges().subscribe(data => {\n            if (data) {\n              observer.next(data);\n            } else {\n              observer.error(new Error('No se encontraron datos para este usuario.'));\n            }\n          }, error => observer.error(error));\n        } else {\n          observer.error(new Error('No hay usuario autenticado'));\n        }\n      });\n    });\n  }\n  // Método para cambiar la contraseña \n  cambiarContrasena(nuevaContrasena) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const user = yield _this5.afAuth.currentUser;\n      if (user) {\n        yield user.updatePassword(nuevaContrasena);\n        console.log('Contraseña cambiada exitosamente.');\n      } else {\n        throw new Error('No hay usuario autenticado para cambiar la contraseña.');\n      }\n    })();\n  }\n  logout() {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this6.afAuth.signOut(); // Cierra sesión en Firebase\n        console.log('Sesión cerrada exitosamente.');\n      } catch (error) {\n        console.error('Error al cerrar sesión:', error);\n        throw error; // Propaga el error para manejarlo en el componente\n      }\n    })();\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthService)(i0.ɵɵinject(i1.AngularFireAuth), i0.ɵɵinject(i2.AngularFirestore));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["Observable","AuthService","constructor","afAuth","firestore","isAuthenticated","_this","_asyncToGenerator","user","currentUser","saveUserData","uid","data","_this2","collection","doc","set","login","email","password","_this3","signInWithEmailAndPassword","register","_this4","createUserWithEmailAndPassword","getUserData","observer","then","valueChanges","subscribe","next","error","Error","cambiarContrasena","nuevaContrasena","_this5","updatePassword","console","log","logout","_this6","signOut","i0","ɵɵinject","i1","AngularFireAuth","i2","AngularFirestore","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jose\\Desktop\\Entregable_3_clean\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { AngularFireAuth } from '@angular/fire/compat/auth';\r\nimport { AngularFirestore } from '@angular/fire/compat/firestore';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  usuario: any;\r\n\r\n  constructor(private afAuth: AngularFireAuth, private firestore: AngularFirestore) {}\r\n\r\n  // Método para verificar si el usuario está autenticado\r\n  async isAuthenticated(): Promise<boolean> {\r\n    const user = await this.afAuth.currentUser;\r\n    return user !== null;\r\n  }\r\n\r\n  // Método para guardar datos adicionales en Firestore\r\n  async saveUserData(uid: string, data: { nombre: string; comuna: string; direccion: string; fechaNacimiento: string; carrera: string }) {\r\n    return this.firestore.collection('users').doc(uid).set(data);\r\n  }\r\n\r\n  // Método para iniciar sesión\r\n  async login(email: string, password: string) {\r\n    return this.afAuth.signInWithEmailAndPassword(email, password);\r\n  }\r\n\r\n  // Método para registrar usuario\r\n  async register(email: string, password: string) {\r\n    return this.afAuth.createUserWithEmailAndPassword(email, password);\r\n  }\r\n\r\n  // Método para obtener los datos del usuario como Observable\r\n  getUserData(): Observable<any> {\r\n    return new Observable((observer) => {\r\n      this.afAuth.currentUser.then((user) => {\r\n        if (user) {\r\n          this.firestore.collection('users').doc(user.uid).valueChanges().subscribe(\r\n            (data) => {\r\n              if (data) {\r\n                observer.next(data);\r\n              } else {\r\n                observer.error(new Error('No se encontraron datos para este usuario.'));\r\n              }\r\n            },\r\n            (error) => observer.error(error)\r\n          );\r\n        } else {\r\n          observer.error(new Error('No hay usuario autenticado'));\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  // Método para cambiar la contraseña \r\n  async cambiarContrasena(nuevaContrasena: string): Promise<void> {\r\n    const user = await this.afAuth.currentUser;\r\n    if (user) {\r\n      await user.updatePassword(nuevaContrasena);\r\n      console.log('Contraseña cambiada exitosamente.');\r\n    } else {\r\n      throw new Error('No hay usuario autenticado para cambiar la contraseña.');\r\n    }\r\n  }\r\n  async logout() {\r\n    try {\r\n      await this.afAuth.signOut(); // Cierra sesión en Firebase\r\n      console.log('Sesión cerrada exitosamente.');\r\n    } catch (error) {\r\n      console.error('Error al cerrar sesión:', error);\r\n      throw error; // Propaga el error para manejarlo en el componente\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}