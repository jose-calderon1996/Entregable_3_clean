{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/jose/Desktop/Entregable_3_clean/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { BarcodeScanner } from 'capacitor-barcode-scanner';\nimport { Browser } from '@capacitor/browser';\nlet ScanerQRPage = class ScanerQRPage {\n  constructor() {\n    this.textoEscaneado = ''; // Contenido del código QR\n    this.mensaje = ''; // Mensajes para el usuario\n    this.datosQR = {}; // JSON extraído del contenido del QR\n  }\n  // Método para obtener las claves del JSON\n  getKeys(obj) {\n    return Object.keys(obj);\n  }\n  escanear() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const resultado = yield BarcodeScanner.scan();\n        console.log('Resultado del escaneo:', resultado);\n        if (resultado && resultado.hasOwnProperty('code')) {\n          _this.textoEscaneado = resultado.code;\n          console.log('Contenido del QR:', _this.textoEscaneado);\n          try {\n            _this.datosQR = JSON.parse(_this.textoEscaneado);\n            _this.mensaje = 'QR escaneado y datos extraídos correctamente.';\n            console.log('Datos extraídos:', _this.datosQR);\n          } catch (error) {\n            console.error('El contenido no es un JSON válido:', error);\n            _this.mensaje = 'El contenido escaneado no es un JSON válido.';\n            _this.datosQR = {}; // Limpiar datos en caso de error\n          }\n          if (_this.textoEscaneado.startsWith('https')) {\n            yield Browser.open({\n              url: _this.textoEscaneado\n            });\n          }\n        } else {\n          _this.mensaje = 'No se detectó contenido en el QR.';\n        }\n      } catch (error) {\n        console.error('Error durante el escaneo:', error);\n        _this.mensaje = 'Ocurrió un error durante el escaneo.';\n      }\n    })();\n  }\n};\nScanerQRPage = __decorate([Component({\n  selector: 'app-home',\n  templateUrl: './home.page.html',\n  styleUrls: ['./home.page.scss']\n})], ScanerQRPage);\nexport { ScanerQRPage };","map":{"version":3,"names":["Component","BarcodeScanner","Browser","ScanerQRPage","constructor","textoEscaneado","mensaje","datosQR","getKeys","obj","Object","keys","escanear","_this","_asyncToGenerator","resultado","scan","console","log","hasOwnProperty","code","JSON","parse","error","startsWith","open","url","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\jose\\Desktop\\Entregable_3_clean\\src\\app\\scaner-qr\\scaner-qr.page.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { BarcodeScanner } from 'capacitor-barcode-scanner';\r\nimport { Browser } from '@capacitor/browser';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.page.html',\r\n  styleUrls: ['./home.page.scss'],\r\n})\r\nexport class ScanerQRPage  {\r\n  textoEscaneado: string = ''; // Contenido del código QR\r\n  mensaje: string = ''; // Mensajes para el usuario\r\n  datosQR: any = {}; // JSON extraído del contenido del QR\r\n\r\n  constructor() {}\r\n\r\n  // Método para obtener las claves del JSON\r\n  getKeys(obj: any): string[] {\r\n    return Object.keys(obj);\r\n  }\r\n\r\n  async escanear() {\r\n    try {\r\n      const resultado: any = await BarcodeScanner.scan();\r\n      console.log('Resultado del escaneo:', resultado);\r\n\r\n      if (resultado && resultado.hasOwnProperty('code')) {\r\n        this.textoEscaneado = resultado.code;\r\n        console.log('Contenido del QR:', this.textoEscaneado);\r\n\r\n        try {\r\n          this.datosQR = JSON.parse(this.textoEscaneado);\r\n          this.mensaje = 'QR escaneado y datos extraídos correctamente.';\r\n          console.log('Datos extraídos:', this.datosQR);\r\n        } catch (error) {\r\n          console.error('El contenido no es un JSON válido:', error);\r\n          this.mensaje = 'El contenido escaneado no es un JSON válido.';\r\n          this.datosQR = {}; // Limpiar datos en caso de error\r\n        }\r\n\r\n        if (this.textoEscaneado.startsWith('https')) {\r\n          await Browser.open({ url: this.textoEscaneado });\r\n        }\r\n      } else {\r\n        this.mensaje = 'No se detectó contenido en el QR.';\r\n      }\r\n    } catch (error) {\r\n      console.error('Error durante el escaneo:', error);\r\n      this.mensaje = 'Ocurrió un error durante el escaneo.';\r\n    }\r\n  }\r\n}"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAASC,cAAc,QAAQ,2BAA2B;AAC1D,SAASC,OAAO,QAAQ,oBAAoB;AAOrC,IAAMC,YAAY,GAAlB,MAAMA,YAAY;EAKvBC,YAAA;IAJA,KAAAC,cAAc,GAAW,EAAE,CAAC,CAAC;IAC7B,KAAAC,OAAO,GAAW,EAAE,CAAC,CAAC;IACtB,KAAAC,OAAO,GAAQ,EAAE,CAAC,CAAC;EAEJ;EAEf;EACAC,OAAOA,CAACC,GAAQ;IACd,OAAOC,MAAM,CAACC,IAAI,CAACF,GAAG,CAAC;EACzB;EAEMG,QAAQA,CAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACZ,IAAI;QACF,MAAMC,SAAS,SAAcd,cAAc,CAACe,IAAI,EAAE;QAClDC,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEH,SAAS,CAAC;QAEhD,IAAIA,SAAS,IAAIA,SAAS,CAACI,cAAc,CAAC,MAAM,CAAC,EAAE;UACjDN,KAAI,CAACR,cAAc,GAAGU,SAAS,CAACK,IAAI;UACpCH,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEL,KAAI,CAACR,cAAc,CAAC;UAErD,IAAI;YACFQ,KAAI,CAACN,OAAO,GAAGc,IAAI,CAACC,KAAK,CAACT,KAAI,CAACR,cAAc,CAAC;YAC9CQ,KAAI,CAACP,OAAO,GAAG,+CAA+C;YAC9DW,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEL,KAAI,CAACN,OAAO,CAAC;UAC/C,CAAC,CAAC,OAAOgB,KAAK,EAAE;YACdN,OAAO,CAACM,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;YAC1DV,KAAI,CAACP,OAAO,GAAG,8CAA8C;YAC7DO,KAAI,CAACN,OAAO,GAAG,EAAE,CAAC,CAAC;UACrB;UAEA,IAAIM,KAAI,CAACR,cAAc,CAACmB,UAAU,CAAC,OAAO,CAAC,EAAE;YAC3C,MAAMtB,OAAO,CAACuB,IAAI,CAAC;cAAEC,GAAG,EAAEb,KAAI,CAACR;YAAc,CAAE,CAAC;UAClD;QACF,CAAC,MAAM;UACLQ,KAAI,CAACP,OAAO,GAAG,mCAAmC;QACpD;MACF,CAAC,CAAC,OAAOiB,KAAK,EAAE;QACdN,OAAO,CAACM,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACjDV,KAAI,CAACP,OAAO,GAAG,sCAAsC;MACvD;IAAC;EACH;CACD;AA1CYH,YAAY,GAAAwB,UAAA,EALxB3B,SAAS,CAAC;EACT4B,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,kBAAkB;EAC/BC,SAAS,EAAE,CAAC,kBAAkB;CAC/B,CAAC,C,EACW3B,YAAY,CA0CxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}